// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using apoemaMatch.Data;

namespace apoemaMatch.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220829054208_QuestionarioSelecao")]
    partial class QuestionarioSelecao
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("apoemaMatch.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("apoemaMatch.Models.Demandante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AreaSolucaoBuscada")
                        .HasColumnType("integer");

                    b.Property<string>("CargoDemandante")
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("text");

                    b.Property<string>("ImagemURL")
                        .HasColumnType("text");

                    b.Property<int>("LeiDeInformatica")
                        .HasColumnType("integer");

                    b.Property<int>("LinhaDeAtuacaoTI")
                        .HasColumnType("integer");

                    b.Property<string>("NomeDemandante")
                        .HasColumnType("text");

                    b.Property<string>("NomeEmpresa")
                        .HasColumnType("text");

                    b.Property<int>("ObjetivoParceria")
                        .HasColumnType("integer");

                    b.Property<int>("PorteDaEmpresa")
                        .HasColumnType("integer");

                    b.Property<int>("RamoDeAtuacao")
                        .HasColumnType("integer");

                    b.Property<int>("RegimeDeTributacao")
                        .HasColumnType("integer");

                    b.Property<int>("SegmentoDeMercado")
                        .HasColumnType("integer");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.Property<int>("TempoDeMercado")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Demandantes");
                });

            modelBuilder.Entity("apoemaMatch.Models.Encomenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AreaSolucaoBuscada")
                        .HasColumnType("integer");

                    b.Property<int?>("DemandanteId")
                        .HasColumnType("integer");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<bool>("EncomendaAberta")
                        .HasColumnType("boolean");

                    b.Property<bool>("RealizaProcessoSeletivo")
                        .HasColumnType("boolean");

                    b.Property<int>("SegmentoDeMercado")
                        .HasColumnType("integer");

                    b.Property<int>("StatusEncomenda")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DemandanteId");

                    b.ToTable("Encomendas");
                });

            modelBuilder.Entity("apoemaMatch.Models.EncomendaSolucionador", b =>
                {
                    b.Property<int>("EncomendaId")
                        .HasColumnType("integer");

                    b.Property<int>("SolucionadorId")
                        .HasColumnType("integer");

                    b.Property<int?>("DemandanteId")
                        .HasColumnType("integer");

                    b.HasKey("EncomendaId", "SolucionadorId");

                    b.HasIndex("DemandanteId");

                    b.HasIndex("SolucionadorId");

                    b.ToTable("EncomendasSolucionadores");
                });

            modelBuilder.Entity("apoemaMatch.Models.OpcaoResposta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("EhRespostaEsperada")
                        .HasColumnType("boolean");

                    b.Property<int?>("QuestaoId")
                        .HasColumnType("integer");

                    b.Property<string>("Texto")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestaoId");

                    b.ToTable("OpcaoResposta");
                });

            modelBuilder.Entity("apoemaMatch.Models.Questao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("EncomendaId")
                        .HasColumnType("integer");

                    b.Property<string>("Pergunta")
                        .HasColumnType("text");

                    b.Property<int>("TipoResposta")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EncomendaId");

                    b.ToTable("Questao");
                });

            modelBuilder.Entity("apoemaMatch.Models.Solucionador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AreaDePesquisa")
                        .HasColumnType("integer");

                    b.Property<string>("CurriculoLattes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Disponivel")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Formacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("text");

                    b.Property<string>("ImagemURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiniBio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Solucionadores");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("apoemaMatch.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("apoemaMatch.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apoemaMatch.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("apoemaMatch.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("apoemaMatch.Models.Encomenda", b =>
                {
                    b.HasOne("apoemaMatch.Models.Demandante", null)
                        .WithMany("Encomendas")
                        .HasForeignKey("DemandanteId");
                });

            modelBuilder.Entity("apoemaMatch.Models.EncomendaSolucionador", b =>
                {
                    b.HasOne("apoemaMatch.Models.Demandante", null)
                        .WithMany("EncomendaSolucionador")
                        .HasForeignKey("DemandanteId");

                    b.HasOne("apoemaMatch.Models.Encomenda", "Encomenda")
                        .WithMany("EncomendaSolucionador")
                        .HasForeignKey("EncomendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apoemaMatch.Models.Solucionador", "Solucionador")
                        .WithMany("EncomendaSolucionador")
                        .HasForeignKey("SolucionadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encomenda");

                    b.Navigation("Solucionador");
                });

            modelBuilder.Entity("apoemaMatch.Models.OpcaoResposta", b =>
                {
                    b.HasOne("apoemaMatch.Models.Questao", null)
                        .WithMany("OpcoesResposta")
                        .HasForeignKey("QuestaoId");
                });

            modelBuilder.Entity("apoemaMatch.Models.Questao", b =>
                {
                    b.HasOne("apoemaMatch.Models.Encomenda", null)
                        .WithMany("Questoes")
                        .HasForeignKey("EncomendaId");
                });

            modelBuilder.Entity("apoemaMatch.Models.Demandante", b =>
                {
                    b.Navigation("Encomendas");

                    b.Navigation("EncomendaSolucionador");
                });

            modelBuilder.Entity("apoemaMatch.Models.Encomenda", b =>
                {
                    b.Navigation("EncomendaSolucionador");

                    b.Navigation("Questoes");
                });

            modelBuilder.Entity("apoemaMatch.Models.Questao", b =>
                {
                    b.Navigation("OpcoesResposta");
                });

            modelBuilder.Entity("apoemaMatch.Models.Solucionador", b =>
                {
                    b.Navigation("EncomendaSolucionador");
                });
#pragma warning restore 612, 618
        }
    }
}
